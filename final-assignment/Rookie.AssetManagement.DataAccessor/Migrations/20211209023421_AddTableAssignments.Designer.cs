// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Rookie.AssetManagement.DataAccessor.Data;

namespace Rookie.AssetManagement.DataAccessor.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211209023421_AddTableAssignments")]
    partial class AddTableAssignments
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Rookie.AssetManagement.DataAccessor.Entities.Asset", b =>
                {
                    b.Property<int>("AssetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("History")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InstalledDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDisable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.HasKey("AssetId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("StateId");

                    b.ToTable("Assets");

                    b.HasData(
                        new
                        {
                            AssetId = 1,
                            AssetName = "Laptop HP Pro Book 450 G1",
                            CategoryId = 1,
                            InstalledDate = new DateTime(2021, 12, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDisable = false,
                            Location = "HCM",
                            Specification = "Core i5, 8GB RAM, 750 GB HDD, Windows 8",
                            StateId = 2
                        },
                        new
                        {
                            AssetId = 2,
                            AssetName = "Laptop HP Pro Book 450 G1",
                            CategoryId = 1,
                            InstalledDate = new DateTime(2021, 12, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDisable = false,
                            Location = "HCM",
                            Specification = "Core i5, 8GB RAM, 750 GB HDD, Windows 8",
                            StateId = 2
                        },
                        new
                        {
                            AssetId = 3,
                            AssetName = "Laptop HP Pro Book 450 G1",
                            CategoryId = 1,
                            InstalledDate = new DateTime(2021, 12, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDisable = false,
                            Location = "HCM",
                            Specification = "Core i5, 8GB RAM, 750 GB HDD, Windows 8",
                            StateId = 1
                        },
                        new
                        {
                            AssetId = 4,
                            AssetName = "Laptop HP Pro Book 450 G1",
                            CategoryId = 1,
                            InstalledDate = new DateTime(2021, 12, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDisable = false,
                            Location = "HCM",
                            Specification = "Core i5, 8GB RAM, 750 GB HDD, Windows 8",
                            StateId = 3
                        },
                        new
                        {
                            AssetId = 5,
                            AssetName = "Monitor Dell UltraSharp",
                            CategoryId = 2,
                            InstalledDate = new DateTime(2021, 12, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDisable = false,
                            Location = "HCM",
                            StateId = 2
                        },
                        new
                        {
                            AssetId = 6,
                            AssetName = "Monitor Dell UltraSharp",
                            CategoryId = 2,
                            InstalledDate = new DateTime(2021, 12, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDisable = false,
                            Location = "HCM",
                            StateId = 2
                        },
                        new
                        {
                            AssetId = 7,
                            AssetName = "Monitor Dell UltraSharp",
                            CategoryId = 2,
                            InstalledDate = new DateTime(2021, 12, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDisable = false,
                            Location = "HCM",
                            StateId = 1
                        },
                        new
                        {
                            AssetId = 8,
                            AssetName = "Monitor Dell UltraSharp",
                            CategoryId = 2,
                            InstalledDate = new DateTime(2021, 12, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDisable = false,
                            Location = "HCM",
                            StateId = 1
                        },
                        new
                        {
                            AssetId = 9,
                            AssetName = "Monitor Dell UltraSharp",
                            CategoryId = 2,
                            InstalledDate = new DateTime(2021, 12, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDisable = false,
                            Location = "HCM",
                            StateId = 2
                        },
                        new
                        {
                            AssetId = 10,
                            AssetName = "Personal Computer",
                            CategoryId = 3,
                            InstalledDate = new DateTime(2021, 12, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDisable = false,
                            Location = "HCM",
                            StateId = 2
                        },
                        new
                        {
                            AssetId = 11,
                            AssetName = "Personal Computer",
                            CategoryId = 3,
                            InstalledDate = new DateTime(2021, 12, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDisable = false,
                            Location = "HCM",
                            StateId = 2
                        },
                        new
                        {
                            AssetId = 12,
                            AssetName = "Personal Computer",
                            CategoryId = 3,
                            InstalledDate = new DateTime(2021, 12, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDisable = false,
                            Location = "HCM",
                            StateId = 3
                        },
                        new
                        {
                            AssetId = 13,
                            AssetName = "Personal Computer",
                            CategoryId = 3,
                            InstalledDate = new DateTime(2021, 12, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDisable = false,
                            Location = "HCM",
                            StateId = 1
                        },
                        new
                        {
                            AssetId = 14,
                            AssetName = "Personal Computer",
                            CategoryId = 3,
                            InstalledDate = new DateTime(2021, 12, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDisable = false,
                            Location = "HCM",
                            StateId = 1
                        },
                        new
                        {
                            AssetId = 15,
                            AssetName = "Laptop HP Pro Book 450 G1",
                            CategoryId = 1,
                            InstalledDate = new DateTime(2021, 12, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDisable = false,
                            Location = "HN",
                            StateId = 2
                        },
                        new
                        {
                            AssetId = 16,
                            AssetName = "Monitor Dell UltraSharp",
                            CategoryId = 2,
                            InstalledDate = new DateTime(2021, 12, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDisable = false,
                            Location = "HN",
                            StateId = 3
                        },
                        new
                        {
                            AssetId = 17,
                            AssetName = "Personal Computer",
                            CategoryId = 3,
                            InstalledDate = new DateTime(2021, 12, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDisable = false,
                            Location = "HN",
                            StateId = 1
                        });
                });

            modelBuilder.Entity("Rookie.AssetManagement.DataAccessor.Entities.Assignment", b =>
                {
                    b.Property<int>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<int>("AssignedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("AssignedToUserId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("AssignmentId");

                    b.HasIndex("AssetId")
                        .IsUnique();

                    b.HasIndex("AssignedByUserId");

                    b.HasIndex("AssignedToUserId");

                    b.ToTable("Assignments");

                    b.HasData(
                        new
                        {
                            AssignmentId = 1,
                            AssetId = 3,
                            AssignedByUserId = 4,
                            AssignedDate = new DateTime(2021, 12, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AssignedToUserId = 2,
                            State = 0
                        },
                        new
                        {
                            AssignmentId = 2,
                            AssetId = 7,
                            AssignedByUserId = 1,
                            AssignedDate = new DateTime(2021, 12, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AssignedToUserId = 11,
                            State = 1
                        },
                        new
                        {
                            AssignmentId = 3,
                            AssetId = 8,
                            AssignedByUserId = 1,
                            AssignedDate = new DateTime(2021, 12, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AssignedToUserId = 12,
                            State = 1
                        },
                        new
                        {
                            AssignmentId = 4,
                            AssetId = 13,
                            AssignedByUserId = 1,
                            AssignedDate = new DateTime(2021, 12, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AssignedToUserId = 13,
                            State = 0
                        },
                        new
                        {
                            AssignmentId = 5,
                            AssetId = 14,
                            AssignedByUserId = 1,
                            AssignedDate = new DateTime(2021, 12, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AssignedToUserId = 13,
                            State = 0
                        },
                        new
                        {
                            AssignmentId = 6,
                            AssetId = 20,
                            AssignedByUserId = 1,
                            AssignedDate = new DateTime(2021, 12, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AssignedToUserId = 14,
                            State = 0
                        },
                        new
                        {
                            AssignmentId = 7,
                            AssetId = 21,
                            AssignedByUserId = 1,
                            AssignedDate = new DateTime(2021, 12, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AssignedToUserId = 14,
                            State = 1
                        },
                        new
                        {
                            AssignmentId = 8,
                            AssetId = 22,
                            AssignedByUserId = 1,
                            AssignedDate = new DateTime(2021, 12, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AssignedToUserId = 14,
                            State = 0
                        },
                        new
                        {
                            AssignmentId = 9,
                            AssetId = 24,
                            AssignedByUserId = 1,
                            AssignedDate = new DateTime(2021, 12, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AssignedToUserId = 15,
                            State = 0
                        },
                        new
                        {
                            AssignmentId = 10,
                            AssetId = 25,
                            AssignedByUserId = 1,
                            AssignedDate = new DateTime(2021, 12, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AssignedToUserId = 15,
                            State = 0
                        });
                });

            modelBuilder.Entity("Rookie.AssetManagement.DataAccessor.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Laptop",
                            Prefix = "LA"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Monitor",
                            Prefix = "MO"
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "Personal Computer",
                            Prefix = "PC"
                        });
                });

            modelBuilder.Entity("Rookie.AssetManagement.DataAccessor.Entities.State", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StateId");

                    b.ToTable("States");

                    b.HasData(
                        new
                        {
                            StateId = 1,
                            Name = "Assigned"
                        },
                        new
                        {
                            StateId = 2,
                            Name = "Available"
                        },
                        new
                        {
                            StateId = 3,
                            Name = "Not available"
                        },
                        new
                        {
                            StateId = 4,
                            Name = "Waiting for recycling"
                        },
                        new
                        {
                            StateId = 5,
                            Name = "Recycled"
                        });
                });

            modelBuilder.Entity("Rookie.AssetManagement.DataAccessor.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("ChangePassword")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("JoinedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Rookie.AssetManagement.DataAccessor.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Rookie.AssetManagement.DataAccessor.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Rookie.AssetManagement.DataAccessor.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Rookie.AssetManagement.DataAccessor.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Rookie.AssetManagement.DataAccessor.Entities.Asset", b =>
                {
                    b.HasOne("Rookie.AssetManagement.DataAccessor.Entities.Category", "Category")
                        .WithMany("Assets")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Rookie.AssetManagement.DataAccessor.Entities.State", "State")
                        .WithMany("Assets")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Rookie.AssetManagement.DataAccessor.Entities.Assignment", b =>
                {
                    b.HasOne("Rookie.AssetManagement.DataAccessor.Entities.Asset", "Asset")
                        .WithOne("Assignment")
                        .HasForeignKey("Rookie.AssetManagement.DataAccessor.Entities.Assignment", "AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Rookie.AssetManagement.DataAccessor.Entities.User", "AssignedByUser")
                        .WithMany("AssignmentsBy")
                        .HasForeignKey("AssignedByUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Rookie.AssetManagement.DataAccessor.Entities.User", "AssignedToUser")
                        .WithMany("AssignmentsTo")
                        .HasForeignKey("AssignedToUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("AssignedByUser");

                    b.Navigation("AssignedToUser");
                });

            modelBuilder.Entity("Rookie.AssetManagement.DataAccessor.Entities.Asset", b =>
                {
                    b.Navigation("Assignment");
                });

            modelBuilder.Entity("Rookie.AssetManagement.DataAccessor.Entities.Category", b =>
                {
                    b.Navigation("Assets");
                });

            modelBuilder.Entity("Rookie.AssetManagement.DataAccessor.Entities.State", b =>
                {
                    b.Navigation("Assets");
                });

            modelBuilder.Entity("Rookie.AssetManagement.DataAccessor.Entities.User", b =>
                {
                    b.Navigation("AssignmentsBy");

                    b.Navigation("AssignmentsTo");
                });
#pragma warning restore 612, 618
        }
    }
}
