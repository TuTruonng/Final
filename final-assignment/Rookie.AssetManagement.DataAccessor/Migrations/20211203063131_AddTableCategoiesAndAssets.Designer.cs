// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Rookie.AssetManagement.DataAccessor.Data;

namespace Rookie.AssetManagement.DataAccessor.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211203063131_AddTableCategoiesAndAssets")]
    partial class AddTableCategoiesAndAssets
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Rookie.AssetManagement.DataAccessor.Entities.Asset", b =>
                {
                    b.Property<int>("AssetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("History")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InstalledDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDisable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("AssetId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Assets");

                    b.HasData(
                        new
                        {
                            AssetId = 1,
                            AssetName = "Laptop HP Pro Book 450 G1",
                            CategoryId = 1,
                            InstalledDate = new DateTime(2021, 12, 3, 13, 31, 30, 762, DateTimeKind.Local).AddTicks(4813),
                            IsDisable = false,
                            Location = "HCM",
                            Specification = "Core i5, 8GB RAM, 750 GB HDD, Windows 8",
                            State = 0
                        },
                        new
                        {
                            AssetId = 2,
                            AssetName = "Laptop HP Pro Book 450 G1",
                            CategoryId = 1,
                            InstalledDate = new DateTime(2021, 12, 3, 13, 31, 30, 763, DateTimeKind.Local).AddTicks(1975),
                            IsDisable = false,
                            Location = "HCM",
                            Specification = "Core i5, 8GB RAM, 750 GB HDD, Windows 8",
                            State = 0
                        },
                        new
                        {
                            AssetId = 3,
                            AssetName = "Laptop HP Pro Book 450 G1",
                            CategoryId = 1,
                            InstalledDate = new DateTime(2021, 12, 3, 13, 31, 30, 763, DateTimeKind.Local).AddTicks(1995),
                            IsDisable = false,
                            Location = "HCM",
                            Specification = "Core i5, 8GB RAM, 750 GB HDD, Windows 8",
                            State = 2
                        },
                        new
                        {
                            AssetId = 4,
                            AssetName = "Laptop HP Pro Book 450 G1",
                            CategoryId = 1,
                            InstalledDate = new DateTime(2021, 12, 3, 13, 31, 30, 763, DateTimeKind.Local).AddTicks(1997),
                            IsDisable = false,
                            Location = "HCM",
                            Specification = "Core i5, 8GB RAM, 750 GB HDD, Windows 8",
                            State = 1
                        },
                        new
                        {
                            AssetId = 5,
                            AssetName = "Monitor Dell UltraSharp",
                            CategoryId = 2,
                            InstalledDate = new DateTime(2021, 12, 3, 13, 31, 30, 763, DateTimeKind.Local).AddTicks(1999),
                            IsDisable = false,
                            Location = "HCM",
                            State = 0
                        },
                        new
                        {
                            AssetId = 6,
                            AssetName = "Monitor Dell UltraSharp",
                            CategoryId = 2,
                            InstalledDate = new DateTime(2021, 12, 3, 13, 31, 30, 763, DateTimeKind.Local).AddTicks(2000),
                            IsDisable = false,
                            Location = "HCM",
                            State = 0
                        },
                        new
                        {
                            AssetId = 7,
                            AssetName = "Monitor Dell UltraSharp",
                            CategoryId = 2,
                            InstalledDate = new DateTime(2021, 12, 3, 13, 31, 30, 763, DateTimeKind.Local).AddTicks(2001),
                            IsDisable = false,
                            Location = "HCM",
                            State = 2
                        },
                        new
                        {
                            AssetId = 8,
                            AssetName = "Monitor Dell UltraSharp",
                            CategoryId = 2,
                            InstalledDate = new DateTime(2021, 12, 3, 13, 31, 30, 763, DateTimeKind.Local).AddTicks(2003),
                            IsDisable = false,
                            Location = "HCM",
                            State = 2
                        },
                        new
                        {
                            AssetId = 9,
                            AssetName = "Monitor Dell UltraSharp",
                            CategoryId = 2,
                            InstalledDate = new DateTime(2021, 12, 3, 13, 31, 30, 763, DateTimeKind.Local).AddTicks(2004),
                            IsDisable = false,
                            Location = "HCM",
                            State = 0
                        },
                        new
                        {
                            AssetId = 10,
                            AssetName = "Personal Computer",
                            CategoryId = 3,
                            InstalledDate = new DateTime(2021, 12, 3, 13, 31, 30, 763, DateTimeKind.Local).AddTicks(2005),
                            IsDisable = false,
                            Location = "HCM",
                            State = 0
                        },
                        new
                        {
                            AssetId = 11,
                            AssetName = "Personal Computer",
                            CategoryId = 3,
                            InstalledDate = new DateTime(2021, 12, 3, 13, 31, 30, 763, DateTimeKind.Local).AddTicks(2006),
                            IsDisable = false,
                            Location = "HCM",
                            State = 0
                        },
                        new
                        {
                            AssetId = 12,
                            AssetName = "Personal Computer",
                            CategoryId = 3,
                            InstalledDate = new DateTime(2021, 12, 3, 13, 31, 30, 763, DateTimeKind.Local).AddTicks(2008),
                            IsDisable = false,
                            Location = "HCM",
                            State = 1
                        },
                        new
                        {
                            AssetId = 13,
                            AssetName = "Personal Computer",
                            CategoryId = 3,
                            InstalledDate = new DateTime(2021, 12, 3, 13, 31, 30, 763, DateTimeKind.Local).AddTicks(2009),
                            IsDisable = false,
                            Location = "HCM",
                            State = 2
                        },
                        new
                        {
                            AssetId = 14,
                            AssetName = "Personal Computer",
                            CategoryId = 3,
                            InstalledDate = new DateTime(2021, 12, 3, 13, 31, 30, 763, DateTimeKind.Local).AddTicks(2011),
                            IsDisable = false,
                            Location = "HCM",
                            State = 2
                        },
                        new
                        {
                            AssetId = 15,
                            AssetName = "Laptop HP Pro Book 450 G1",
                            CategoryId = 1,
                            InstalledDate = new DateTime(2021, 12, 3, 13, 31, 30, 763, DateTimeKind.Local).AddTicks(2012),
                            IsDisable = false,
                            Location = "HN",
                            State = 0
                        },
                        new
                        {
                            AssetId = 16,
                            AssetName = "Monitor Dell UltraSharp",
                            CategoryId = 2,
                            InstalledDate = new DateTime(2021, 12, 3, 13, 31, 30, 763, DateTimeKind.Local).AddTicks(2014),
                            IsDisable = false,
                            Location = "HN",
                            State = 1
                        },
                        new
                        {
                            AssetId = 17,
                            AssetName = "Personal Computer",
                            CategoryId = 3,
                            InstalledDate = new DateTime(2021, 12, 3, 13, 31, 30, 763, DateTimeKind.Local).AddTicks(2015),
                            IsDisable = false,
                            Location = "HN",
                            State = 2
                        });
                });

            modelBuilder.Entity("Rookie.AssetManagement.DataAccessor.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Laptop",
                            Prefix = "LA"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Monitor",
                            Prefix = "MO"
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "Personal Computer",
                            Prefix = "PC"
                        });
                });

            modelBuilder.Entity("Rookie.AssetManagement.DataAccessor.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("ChangePassword")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("JoinedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Rookie.AssetManagement.DataAccessor.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Rookie.AssetManagement.DataAccessor.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Rookie.AssetManagement.DataAccessor.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Rookie.AssetManagement.DataAccessor.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Rookie.AssetManagement.DataAccessor.Entities.Asset", b =>
                {
                    b.HasOne("Rookie.AssetManagement.DataAccessor.Entities.Category", "Category")
                        .WithMany("Assets")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Rookie.AssetManagement.DataAccessor.Entities.Category", b =>
                {
                    b.Navigation("Assets");
                });
#pragma warning restore 612, 618
        }
    }
}
